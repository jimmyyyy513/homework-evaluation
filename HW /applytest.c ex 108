#include <stdio.h>
#include <math.h>

#define MAX_EXAMS 9
#define ROOM_COUNT 10

// Training categories (immutable, global, one-dimensional)
const char training01_arr[MAX_EXAMS][20] = {
    "Physical Strength",
    "Knowledge",
    "Self-Management",
    "Teamwork",
    "Korean Language",
    "Vocal",
    "Dance",
    "Visual",
    "Acting"
};

// Global arrays (1D only)
int examDate01_arr[MAX_EXAMS];     // Stores exam dates (YYYYMMDD)
int scheduled01_arr[MAX_EXAMS];    // Tracks scheduled exams (0 or 1)
int passed01_arr[MAX_EXAMS];       // Tracks passed exams (0 or 1)

// Utility: convert YYYYMMDD to number of days (approximate, no pointers)
int date_to_days(int yyyymmdd) {
    int y = yyyymmdd / 10000;
    int m = (yyyymmdd % 10000) / 100;
    int d = yyyymmdd % 100;
    return y * 365 + m * 30 + d;
}

// Check prerequisites
int is_eligible(int category_index) {
    if (category_index == 0 || category_index == 1)
        return 1; // Physical & Knowledge have no prereqs
    if ((category_index == 2 || category_index == 3) && passed01_arr[0] && passed01_arr[1])
        return 1; // Self-Mgmt & Teamwork depend on Phys & Know
    if (passed01_arr[2] && passed01_arr[3])
        return 1; // All others depend on Self-Mgmt & Teamwork
    return 0;
}

// Room assignment if exam is today
void assign_room_if_today(int today) {
    for (int i = 0; i < MAX_EXAMS; i++) {
        if (scheduled01_arr[i] && examDate01_arr[i] == today) {
            int room = today % ROOM_COUNT + 1; // pseudo-random
            printf("üìç Exam today: %s in Room %d\n", training01_arr[i], room);
        }
    }
}

// Send reminders 10 days before exam
void send_reminders(int today) {
    for (int i = 0; i < MAX_EXAMS; i++) {
        if (scheduled01_arr[i]) {
            int delta = date_to_days(examDate01_arr[i]) - date_to_days(today);
            if (delta > 0 && delta <= 10) {
                printf("üîî Reminder: %s exam is in %d days (on %d)\n", training01_arr[i], delta, examDate01_arr[i]);
            }
        }
    }
}

int main() {
    int start_date, today, choice, exam_date;

    printf("Enter training start date (YYYYMMDD): ");
    scanf("%d", &start_date);

    printf("Enter today's date (YYYYMMDD): ");
    scanf("%d", &today);

    // Run bonuses
    send_reminders(today);
    assign_room_if_today(today);

    while (1) {
        printf("\n===== Certification Menu =====\n");
        for (int i = 0; i < MAX_EXAMS; i++) {
            printf("%d. %s %s\n", i + 1, training01_arr[i],
                   scheduled01_arr[i] ? "(Scheduled)" : "");
        }
        printf("0. Exit\n");

        printf("Select category to schedule (1-9): ");
        scanf("%d", &choice);

        if (choice == 0) break;
        if (choice < 1 || choice > MAX_EXAMS) {
            printf("‚ùå Invalid selection.\n");
            continue;
        }

        int index = choice - 1;

        if (scheduled01_arr[index]) {
            printf("‚ö†Ô∏è Already scheduled.\n");
            continue;
        }

        if (!is_eligible(index)) {
            printf("‚õî Prerequisites not met.\n");
            continue;
        }

        printf("Enter exam date (YYYYMMDD): ");
        scanf("%d", &exam_date);

        int days_from_start = date_to_days(exam_date) - date_to_days(start_date);
        if (days_from_start < 30 || days_from_start > 100) {
            printf("‚ö†Ô∏è Date must be 30‚Äì100 days from start.\n");
            continue;
        }

        examDate01_arr[index] = exam_date;
        scheduled01_arr[index] = 1;
        passed01_arr[index] = 1;

        printf("‚úÖ %s exam scheduled for %d\n", training01_arr[index], exam_date);
    }

    printf("\nüìò Final Exam Schedule:\n");
    for (int i = 0; i < MAX_EXAMS; i++) {
        if (scheduled01_arr[i]) {
            printf("- %s: %d\n", training01_arr[i], examDate01_arr[i]);
        }
    }

    return 0;
}
