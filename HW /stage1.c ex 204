#include <stdio.h>
#include <string.h>

#define MAX_MEMBERS 10
#define MAX_NAME_LENGTH 50
#define MAX_DAY_LENGTH 10
#define MAX_MEAL_LENGTH 100
#define DAYS_IN_WEEK 7

const char *week_days[DAYS_IN_WEEK] = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};

typedef struct {
    char name[MAX_NAME_LENGTH];
    int age;
    float weight;
    float height;
} PhysicalCondition;

typedef struct {
    char workout[100];
} WorkoutRoutine;

typedef struct {
    char dietType[20]; // e.g., "Vegan", "Flexitarian"
    char meals[DAYS_IN_WEEK][MAX_MEAL_LENGTH];
} DietPlan;

// Arrays to store data
PhysicalCondition physicalConditions[MAX_MEMBERS];
WorkoutRoutine workoutRoutines[MAX_MEMBERS];
DietPlan dietPlans[MAX_MEMBERS];

int memberCount = 0;

// Function prototypes
void enterPhysicalCondition();
void viewPhysicalCondition();
void setWorkoutRoutine();
void viewWorkoutRoutine();
void setDietPlan();
void viewDietPlan();
int findMemberIndex(const char *name);

int main() {
    int choice;

    while (1) {
        printf("\n=== Milliways Member Management System ===\n");
        printf("1. Enter Physical Condition\n");
        printf("2. View Physical Condition\n");
        printf("3. Set Workout Routine\n");
        printf("4. View Workout Routine\n");
        printf("5. Set Diet Plan\n");
        printf("6. View Diet Plan\n");
        printf("0. Exit\n");
        printf("Select menu: ");
        scanf("%d", &choice);
        getchar(); // consume newline

        switch (choice) {
            case 1: enterPhysicalCondition(); break;
            case 2: viewPhysicalCondition(); break;
            case 3: setWorkoutRoutine(); break;
            case 4: viewWorkoutRoutine(); break;
            case 5: setDietPlan(); break;
            case 6: viewDietPlan(); break;
            case 0: return 0;
            default: printf("Invalid option. Try again.\n");
        }
    }
    return 0;
}

void enterPhysicalCondition() {
    if (memberCount >= MAX_MEMBERS) {
        printf("Member limit reached.\n");
        return;
    }

    printf("\nEnter member name: ");
    fgets(physicalConditions[memberCount].name, MAX_NAME_LENGTH, stdin);
    strtok(physicalConditions[memberCount].name, "\n");

    printf("Enter age: ");
    scanf("%d", &physicalConditions[memberCount].age);

    printf("Enter weight (kg): ");
    scanf("%f", &physicalConditions[memberCount].weight);

    printf("Enter height (cm): ");
    scanf("%f", &physicalConditions[memberCount].height);
    getchar();

    memberCount++;
    printf("Physical condition saved.\n");
}

void viewPhysicalCondition() {
    if (memberCount == 0) {
        printf("No members found.\n");
        return;
    }

    for (int i = 0; i < memberCount; i++) {
        printf("\nMember %d:\n", i + 1);
        printf("Name: %s\n", physicalConditions[i].name);
        printf("Age: %d\n", physicalConditions[i].age);
        printf("Weight: %.1f kg\n", physicalConditions[i].weight);
        printf("Height: %.1f cm\n", physicalConditions[i].height);
    }
}

void setWorkoutRoutine() {
    char name[MAX_NAME_LENGTH];
    printf("\nEnter member name: ");
    fgets(name, MAX_NAME_LENGTH, stdin);
    strtok(name, "\n");

    int index = findMemberIndex(name);
    if (index == -1) {
        printf("Member not found.\n");
        return;
    }

    printf("Enter workout routine: ");
    fgets(workoutRoutines[index].workout, 100, stdin);
    strtok(workoutRoutines[index].workout, "\n");
    printf("Workout routine set.\n");
}

void viewWorkoutRoutine() {
    char name[MAX_NAME_LENGTH];
    printf("\nEnter member name: ");
    fgets(name, MAX_NAME_LENGTH, stdin);
    strtok(name, "\n");

    int index = findMemberIndex(name);
    if (index == -1) {
        printf("Member not found.\n");
        return;
    }

    printf("Workout routine for %s: %s\n", name, workoutRoutines[index].workout);
}

void setDietPlan() {
    char name[MAX_NAME_LENGTH];
    printf("\nEnter member name: ");
    fgets(name, MAX_NAME_LENGTH, stdin);
    strtok(name, "\n");

    int index = findMemberIndex(name);
    if (index == -1) {
        printf("Member not found.\n");
        return;
    }

    printf("Enter diet type (Vegan/Flexitarian/Other): ");
    fgets(dietPlans[index].dietType, 20, stdin);
    strtok(dietPlans[index].dietType, "\n");

    for (int i = 0; i < DAYS_IN_WEEK; i++) {
        printf("Meal for %s: ", week_days[i]);
        fgets(dietPlans[index].meals[i], MAX_MEAL_LENGTH, stdin);
        strtok(dietPlans[index].meals[i], "\n");
    }

    printf("Diet plan set.\n");
}

void viewDietPlan() {
    char name[MAX_NAME_LENGTH];
    printf("\nEnter member name: ");
    fgets(name, MAX_NAME_LENGTH, stdin);
    strtok(name, "\n");

    int index = findMemberIndex(name);
    if (index == -1) {
        printf("Member not found.\n");
        return;
    }

    printf("Diet type for %s: %s\n", name, dietPlans[index].dietType);
    for (int i = 0; i < DAYS_IN_WEEK; i++) {
        printf("%s: %s\n", week_days[i], dietPlans[index].meals[i]);
    }
}

int findMemberIndex(const char *name) {
    for (int i = 0; i < memberCount; i++) {
        if (strcmp(name, physicalConditions[i].name) == 0) {
            return i;
        }
    }
    return -1;
}
