#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

#define MAX_LEN 100

// --- Arthur's Easter Egg Struct ---
typedef struct {
    char keyword[8];
    char message[300];
} ArthurTrauma;

ArthurTrauma arthur = {
    "specter",
    "I confess. After graduating from university, I was blinded by the arrogance of starting a startup and recklessly blocked my friends' paths. I painfully learned that when I am the only one convinced by my idea, it leads to disastrous results. The past Arthur was a ghost of dogmatism and stubbornness."
};

// --- Convert char to 8-bit binary string ---
void charToBinary(unsigned char ch, char *bin) {
    for (int i = 7; i >= 0; i--) {
        bin[7 - i] = (ch & (1 << i)) ? '1' : '0';
    }
    bin[8] = '\0';
}

// --- Show binary of keyword in reverse ---
void showReversedBinary() {
    printf("Binary in reverse order:\n");
    for (int i = strlen(arthur.keyword) - 1; i >= 0; i--) {
        char bin[9];
        charToBinary(arthur.keyword[i], bin);
        printf("%c -> %s\n", arthur.keyword[i], bin);
    }
}

// --- isRightChar: User inputs characters that match reverse keyword ---
int isRightChar(char input[]) {
    int len = strlen(arthur.keyword);
    for (int i = 0; i < len; i++) {
        if (input[i] != arthur.keyword[len - 1 - i]) return 0;
    }
    return 1;
}

// --- isEasterEgg: Check if word == keyword ---
int isEasterEgg(char input[]) {
    return strcmp(input, arthur.keyword) == 0;
}

// --- BONUS: Shuffle keyword and rearrange odd/even ---
void bonusScrambleBinary() {
    char shuffled[8];
    strcpy(shuffled, arthur.keyword);

    // Shuffle (Fisher-Yates)
    for (int i = 6; i > 0; i--) {
        int j = rand() % (i + 1);
        char tmp = shuffled[i];
        shuffled[i] = shuffled[j];
        shuffled[j] = tmp;
    }

    // Separate odd & even
    char odd[8] = {0}, even[8] = {0};
    int o = 0, e = 0;
    for (int i = 0; i < strlen(shuffled); i++) {
        if (i % 2 == 1) odd[o++] = shuffled[i];
        else even[e++] = shuffled[i];
    }

    printf("\n[Bonus] Odd-indexed letters:\n");
    for (int i = 0; i < o; i++) {
        char bin[9];
        charToBinary(odd[i], bin);
        printf("%c -> %s\n", odd[i], bin);
    }

    printf("\n[Bonus] Even-indexed letters:\n");
    for (int i = 0; i < e; i++) {
        char bin[9];
        charToBinary(even[i], bin);
        printf("%c -> %s\n", even[i], bin);
    }
}

// --- Easter Egg Trigger ---
void find_easter_egg() {
    char input[10];
    char confirm[10];
    char word[10];

    printf("<<Arthur's Easter Egg>>\n");
    showReversedBinary();

    while (1) {
        printf("\nEnter characters (in order of reversed binary hint): ");
        scanf("%s", input);
        if (isRightChar(input)) break;
        else printf("Incorrect. Try again.\n");
    }

    printf("Now, combine the characters into a word: ");
    scanf("%s", word);

    if (isEasterEgg(word)) {
        printf("\n##Easter Egg Discovered!$$\n%s\n", arthur.message);
        bonusScrambleBinary();  // Optional: Comment if not required
    } else {
        printf("That is not the correct keyword. Returning to menu...\n");
    }
}
